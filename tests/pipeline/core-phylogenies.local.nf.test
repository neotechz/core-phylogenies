nextflow_pipeline {

    name "Test Workflow CORE_PHYLOGENIES on 'local'"
    script "main.nf"
    profile "local"

    test("Produces error when missing input data") {
        when {
            params {
                data = null

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is absent but end is present when filtering by nucleotide diversity") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = null
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is present but end is absent when filtering by nucleotide diversity") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = null

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is absent but end is present when filtering by dN/dS ratio") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = null
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is present but end is absent when filtering by dN/dS ratio") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = null
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when using both filter_only and measure_only options") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true
                measure_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    } 

    test("Produces error when missing reference tree for complete pipeline") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    } 

    test("Terminates properly when skipping filtering by polymmorphic sites with 'filter_only' param") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = null

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 0 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when skipping filtering by nucleotide diversity with 'filter_only' param") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = null
                filter_by_nucleotide_diversity_end = null

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 0 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when skipping filtering by dN/dS ratio with 'filter_only' param") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = null
                filter_by_dnds_ratio_end = null
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 0 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when given complete input with 'filter_only' param") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 11 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 11 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when given complete input with 'measure_only' param") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // Pipeline options
                measure_only = true
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 6 }

                // 2 PREPARE_ID
                // 2 MEASURE_RF_DISTANCE
                // 2 MEASURE_AVERAGE_SUPPORT
            )
        }
        
    }

    test("Terminates properly with complete input data that passes all filters") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 15 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 15 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 1 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
                // 1 MEASURE_RF_DISTANCE
                // 1 MEASURE_AVERAGE_SUPPORT
            )
        }
    }

    test("Terminates properly with complete input data that is reduced upon filtering") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.1
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 14 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 14 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY (one fails here)
                // 1 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 1 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
                // 1 MEASURE_RF_DISTANCE
                // 1 MEASURE_AVERAGE_SUPPORT
            )
        }
        
    }
}