nextflow_pipeline {

    name "Test Errors for Workflow CORE_PHYLOGENIES on 'local'"
    script "main.nf"
    profile "local"

    test("Produces error when missing input data") {
        when {
            params {
                data = null

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is absent but end is present when filtering by nucleotide diversity") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = null
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is present but end is absent when filtering by nucleotide diversity") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = null

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is absent but end is present when filtering by dN/dS ratio") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = null
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when range start is present but end is absent when filtering by dN/dS ratio") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = null

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    }

    test("Produces error when using both filter_only and measure_only options") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                filter_only = true
                measure_only = true

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    } 

    test("Produces error when missing reference tree for complete pipeline") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    } 

    test("Produces error when missing phylogeny construction method") {
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert !workflow.success }
            )
        }

    } 

}