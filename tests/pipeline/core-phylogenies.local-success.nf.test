nextflow_pipeline {

    name "Test Success for Workflow CORE_PHYLOGENIES on 'local'"
    script "main.nf"
    profile "local"

    test("Terminates properly when skipping filtering by polymmorphic sites") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                pipeline_phylo = false
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = null

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 0 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when skipping filtering by nucleotide diversity") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                pipeline_phylo = false
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = null
                filter_by_nucleotide_diversity_end = null

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 0 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when skipping filtering by dN/dS ratio") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                pipeline_phylo = false
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = null
                filter_by_dnds_ratio_end = null
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 9 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 9 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 0 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when given complete input and filtering only") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"

                // Pipeline options
                pipeline_phylo = false
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 11 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 11 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
            )
        }
        
    }

    test("Terminates properly when given complete input and measuring only") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // Pipeline options
                pipeline_filter = false
                pipeline_phylo = false
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 6 }

                // 2 PREPARE_ID
                // 2 MEASURE_RF_DISTANCE
                // 2 MEASURE_AVERAGE_SUPPORT
            )
        }
        
    }

    test("Terminates properly when constructing tree via 'raxml-ng' without measuring") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // Pipeline options
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "raxml-ng"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 13 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 13 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 1 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
            )
        }
    }

    test("Terminates properly when constructing tree via 'iqtree2' without measuring") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // Pipeline options
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "iqtree2"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 13 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 13 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 1 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
            )
        }
    }

    test("Terminates properly when constructing tree via 'fasttree' without measuring") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // Pipeline options
                pipeline_measure = false

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "fasttree"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 12 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 12 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 0 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
            )
        }
    }

    test("Terminates properly when measuring tree after 'fasttree' construction") { 
        when {
            params {
                data = "${projectDir}/tests/data/prorocentrum-spp-pipeline"
                data_reference = "reference.support.tre"

                // FILTER_BY_POLYMORPHIC_SITES
                filter_by_polymorphic_sites_cutoff = 0.05

                // FILTER_BY_NUCLEOTIDE_DIVERSITY
                filter_by_nucleotide_diversity_start = 0.05
                filter_by_nucleotide_diversity_end = 0.8

                // FILTER_BY_DNDS_RATIO
                filter_by_dnds_ratio_start = 0.1
                filter_by_dnds_ratio_end = 1.0

                // MAKE_PHYLOGENY
                make_phylogeny_method = "fasttree"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 14 },
                { assert workflow.trace.failed().size() == 0 }, 
                { assert workflow.trace.tasks().size() == 14 }

                // 2 PREPARE_ID
                // 2 FORMAT_HEADERS
                // 2 FILTER_BY_POLYMORPHIC_SITES
                // 2 FILTER_BY_NUCLEOTIDE_DIVERSITY
                // 2 FILTER_BY_DNDS_RATIO
                // 1 CONCATENATE_ALIGNMENTS
                // 0 CALCULATE_SUBSTITUTION_MODEL
                // 1 MAKE_PHYLOGENY
                // 1 MEASURE_RF_DISTANCE
                // 1 MEASURE_AVERAGE_SUPPORT
            )
        }
    }
}