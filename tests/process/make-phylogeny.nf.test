nextflow_process {

    name "Test Process MAKE_PHYLOGENY"
    script "modules/make-phylogeny.nf"
    process "MAKE_PHYLOGENY"
    profile "local"

    test("Constructs tree using raxml-ng") {

        when {
            params {
                make_phylogeny_method = "raxml-ng"
            }
            process {
                """
                input[0] = Channel.of(["prorocentrum-spp",
                    "${projectDir}/tests/data/prorocentrum-spp-aligned.fasta",
                    "${projectDir}/tests/data/prorocentrum-spp-substitution-model.out",
                    "\${params.container_raxml_ng}",
                    null])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out[0][0][0] == "prorocentrum-spp" },
                { assert new File(process.out[0][0][1]).exists()} // {id}.raxml.support md5sum not constant
            )
        }
        
    }

    test("Constructs tree using fasttree") {

        when {
            params {
                make_phylogeny_method = "fasttree"
            }
            process {
                """
                input[0] = Channel.of(["prorocentrum-spp",
                    "${projectDir}/tests/data/prorocentrum-spp-aligned.fasta",
                    "${projectDir}/tests/data/prorocentrum-spp-substitution-model.out",
                    "\${params.container_fasttree}",
                    null])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out[0][0][0] == "prorocentrum-spp" },
                { assert new File(process.out[0][0][1]).exists()} // {id}.raxml.support md5sum not constant
            )
        }
        
    }

    test("Constructs tree using iqtree2") {

        when {
            params {
                make_phylogeny_method = "iqtree2"
            }
            process {
                """
                input[0] = Channel.of(["prorocentrum-spp",
                    "${projectDir}/tests/data/prorocentrum-spp-aligned.fasta",
                    "${projectDir}/tests/data/prorocentrum-spp-substitution-model.out",
                    "\${params.container_iqtree2}",
                    null])
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out[0][0][0] == "prorocentrum-spp" },
                { assert new File(process.out[0][0][1]).exists()} // {id}.raxml.support md5sum not constant
            )
        }
        
    }

}